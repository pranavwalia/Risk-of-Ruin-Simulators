runAggregateSims2 <- function(x,start,increment,swing,a,b) {
cols <- c("P1 Win %","P2 Win %", "Tie %","P2 Bankroll Advantage")
out <- data.frame(matrix(ncol = 4, nrow = 0))
for (i in 1:x) {
b <-  b + increment
p1 <- (a/.02*a)/(((b*a)/.02*a) + (a/(0.2*a)))
p2 <- ((b*a)/.02*a)/(((b*a)/.02*a) + (a/(0.2*a)))
p1winrate <- p1/(p1 + p2)
p2winrate <- p2/(p1 + p2)
row <- c(p1,p2,0,-1 * (1 - b))
out <- rbind(out,row)
print(paste("Sim ", toString(i), "/", toString(x), " Complete"))
}
colnames(out) <- cols
out
}
huygensFormula <- runAggregateSims2(300,1,.01,.02,1000,1)
qplot(huygensFormula$`P2 Bankroll Advantage`,huygensFormula$`P1 Win %`,)
##Runs the aggregate sims using the Huygen's Theorom
runAggregateSims2 <- function(x,start,increment,swing,a,b) {
cols <- c("P1 Win %","P2 Win %", "Tie %","P2 Bankroll Advantage")
out <- data.frame(matrix(ncol = 4, nrow = 0))
for (i in 1:x) {
b <-  b + increment
p1 <- (a/.02*a)/(((b*a)/.02*a) + (a/(0.2*a)))
p2 <- ((b*a)/.02*a)/(((b*a)/.02*a) + (a/(0.2*a)))
p1winrate <- p1/(p1 + p2)
p2winrate <- p2/(p1 + p2)
row <- c(p1winrate,p2winrate,0,-1 * (1 - b))
out <- rbind(out,row)
print(paste("Sim ", toString(i), "/", toString(x), " Complete"))
}
colnames(out) <- cols
out
}
huygensFormula <- runAggregateSims2(300,1,.01,.02,1000,1)
qplot(huygensFormula$`P2 Bankroll Advantage`,huygensFormula$`P1 Win %`,)
qplot(huygensFormula$`P2 Bankroll Advantage`,huygensFormula$`P2 Win %`)
#Plotting the Distribution
huygensFormula <- runAggregateSims2(300,1,.01,.02,1000,1)
huygensFormulaPercent <- huygensFormula * 100
qplot(huygensFormulaPercent$`P2 Bankroll Advantage`,huygensFormulaPercent$`P1 Win %`,)
qplot(huygensFormulaPercent$`P2 Bankroll Advantage`,huygensFormulaPercent$`P2 Win %`)
#Plotting the Distribution
huygensFormula <- runAggregateSims2(300,1,.01,.02,1000,1)
huygensFormulaPercent <- huygensFormula * 100
qplot(huygensFormulaPercent$`P2 Bankroll Advantage`,huygensFormulaPercent$`P1 Win %`,xlab = "Player 2 Bankroll Advantage %",ylab = "Player 1 Win Likelihood %",
main = "Probability Player 1 Wins")
qplot(huygensFormulaPercent$`P2 Bankroll Advantage`,huygensFormulaPercent$`P2 Win %`,xlab = "Player 2 Bankroll Advantage %",ylab = "Player 2 Win Likelihood %",
main = "Probability Player 2 Wins")
ggplot(aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`, y = huygensFormulaPercent$`P2 Win %`))
+ geom_point() + geom_point(x = sims$`P2 Bankroll Advantage`, y = sims$`P2 Win %`)
ggplot(aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`, y = huygensFormulaPercent$`P2 Win %`)) + geom_point() + geom_point(x = sims$`P2 Bankroll Advantage`, y = sims$`P2 Win %`)
ggplot(aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`, y = huygensFormulaPercent$`P2 Win %`)) + geom_point() + geom_point(x = sims$`P2 Bankroll Advantage`, y = sims$`P2 Win %`)
ggplot(huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`, y = huygensFormulaPercent$`P2 Win %`)) + geom_point() + geom_point(x = sims$`P2 Bankroll Advantage`, y = sims$`P2 Win %`)
ggplot(huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`, y = huygensFormulaPercent$`P2 Win %`)) + geom_point(color = 'blue')
+ geom_point(y = sims$`P2 Win %`,color = 'green')
ggplot(huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`, y = huygensFormulaPercent$`P2 Win %`)) + geom_point(color = 'blue') + geom_point(y = sims$`P2 Win %`,color = 'green')
ggplot(huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`, y = huygensFormulaPercent$`P2 Win %`)) + geom_point(color = 'blue') + geom_point(y = sims$`P2 Win %`,color = 'green')
ggplot(aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`, y = huygensFormulaPercent$`P2 Win %`)) + geom_point(color = 'blue') + geom_point(y = sims$`P2 Win %`,color = 'green')
percentCombined <- cbind(huygensFormulaPercent,sims)
percentCombined[0,]
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(y = percentCombined[,5],color = 'green')
geom_point(y = percentCombined[,5],color = 'green')
geom_point(y = percentCombined[,5],color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(y = percentCombined[,5]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(y = percentCombined[,6]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(y = percentCombined[,6]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(y = percentCombined[,6]),color = 'green')
View(percentCombined)
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,6]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,6]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,6]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,6]),color = 'green')
View(percentCombined)
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,4]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,2]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,6])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,2]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,7])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,2]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,8])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,2]),color = 'green')
View(percentCombined)
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,6])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,4],y = percentCombined[,2]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,6])) + geom_point(color = 'blue') + geom_line(aes(x = percentCombined[,4],y = percentCombined[,2]),color = 'green')
percentCombined[,4]
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,6])) + geom_point(color = 'blue') + geom_point(aes(y = percentCombined[,2]),color = 'green')
percentCombined[,2]
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,6])) + geom_point(color = 'blue') + geom_point(aes(x = percentCombined[,2]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,6])) + geom_point(color = 'blue') + geom_point(percentCombined[,2]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,6])) + geom_point(color = 'blue') + geom_point(percentCombined[,2],color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,6])) + geom_point(color = 'blue') + geom_point(aes(percentCombined[,2]),color = 'green')
ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_point(aes(percentCombined[,2]),color = 'green')
b <- ggplot(percentCombined,aes(x=percentCombined[,6],y= percentCombined[,2])) + geom_point(color = 'green')
b <- ggplot(percentCombined,aes(x=percentCombined[,6],y= percentCombined[,2])) + geom_point(color = 'green')
b
b <- ggplot(percentCombined,aes(x=percentCombined[,4],y= percentCombined[,6])) + geom_point(color = 'green')
b
a <- ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue')
a
b + a
a <- ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue')
library(dplyr)
a <- ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue')
+ geom_line() + geom_point(aes(y=percentCombined[,6]))
a
library(dplyr)
a <- ggplot(percentCombined,aes(x = percentCombined[,4], y = percentCombined[,2])) + geom_point(color = 'blue') + geom_line() + geom_point(aes(y=percentCombined[,6]))
a
a <- ggplot() + geom_point(aes(x = percentCombined[,4], y = percentCombined[,2]), color = 'blue') + geom_point(aes(y=percentCombined[,6]))
a
a <- ggplot() + geom_point(aes(x = percentCombined[,4], y = percentCombined[,2]), color = 'blue') + geom_point(aes(x = percentCombined[,4],y=percentCombined[,6]))
a
a <- ggplot() + geom_point(aes(x = percentCombined[,4], y = percentCombined[,2]), color = 'blue') + geom_point(aes(x = percentCombined[,4],y=percentCombined[,6]))
a
a <- ggplot() + geom_point(aes(x = percentCombined[,4], y = percentCombined[,2]), color = 'blue') + geom_point(aes(x = percentCombined[,4],y=percentCombined[,6]))
a
a <- ggplot() + geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`))
a
a <- ggplot() + geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`)) + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`))
a
a <- ggplot() + geom_point(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`)) + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`))
+ xlab("P2 Bankroll Advantage %") + ylab("Player 2 Win Likelihood")
a <- ggplot() + geom_point(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`)) + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`)) + xlab("P2 Bankroll Advantage %") + ylab("Player 2 Win Likelihood")
a <- ggplot() + geom_point(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`)) + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`)) + xlab("P2 Bankroll Advantage %") + ylab("Player 2 Win Likelihood")
a
a <- ggplot() + geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") +
geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`)) + xlab("P2 Bankroll Advantage %") + ylab("Player 2 Win Likelihood")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`)) + xlab("P2 Bankroll Advantage %") + ylab("Player 2 Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + main("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "red") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + main("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "red") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + main("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "red") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + title("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "red") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "green") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "red") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation")
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation") +
+ theme(legend.title = element_text(colour = "blue", size = 10))
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation") +
theme(legend.title = element_text(colour = "blue", size = 10))
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation") +
theme(legend.position = "top") + theme(legend.title = element_text(colour = "blue", size = 10))
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation") +
theme(legend.position = "top") + theme(legend.title = element_text(colour = "blue", size = 10)) + scale_color_discrete("Legend", c("Huygden's Formula","Sim Results"), limits, breaks)
a
a <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = "yellow") + xlab("P2 % Bankroll Advantage") + ylab("Player 2 % Win Likelihood") +
geom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = "blue") + ggtitle("Player 2 Winning Distribution: Huygen's Formula vs Simulation") +
theme(legend.position = "top") + theme(legend.title = element_text(colour = "blue", size = 10)) + scale_color_discrete("Legend", c("Huygden's Formula","Sim Results"))
a
qplot(simsWithPercent$`P2 Bankroll Advantage`,simsWithPercent$`P2 Win %`,xlab = "Player 2 Bankroll Advantage %",ylab = "Player 2 Win Likelihood %",
main = "Probability Player 2 Wins")
qplot(huygensFormulaPercent$`P2 Bankroll Advantage`,huygensFormulaPercent$`P2 Win %`,xlab = "Player 2 Bankroll Advantage %",ylab = "Player 2 Win Likelihood %",
main = "Probability Player 2 Wins")
sample(1:5,1)
sample(1:5,1)
sample(1:5,1)
sample(1:5,1)
sample(1:5,1)
sample(1:5,40)
sample(1:5,40,replace = TRUE)
runKellySim(capital,p,trials,odds) {
out <- data.frame(matrix(ncol = 2, nrow = 0))
cols <- c("Trials","Capital")
for (i in 1:trials) {
#uses kelly formula to determine percentage of portfolio to bet
moneyToBet = (((odds * p) - (1 - p))/odds)
#Random number to simulate bet outcome
t <= sample(1:100,1)
if (t <= p) {
capital <- capital + (odds * moneyToBet)
} else {
capital <- capital - moneyToBet
}
out <- rbind(out,c(i,capital))
}
colnames(out) <- cols
out
}
####Outputs a dataFrame logging n trials
#capital[double]: Starting value
#p[double]: probability of success (passed as a percent eg. 1,2,50)
#[trials]: sample size of trials
#[odds]: The odds of the bet. 1:1 => you make back exactly what you bet. 2:1 => twice what you bet
runKellySim <- function(capital,p,trials,odds) {
out <- data.frame(matrix(ncol = 2, nrow = 0))
cols <- c("Trials","Capital")
for (i in 1:trials) {
#uses kelly formula to determine percentage of portfolio to bet
moneyToBet = (((odds * p) - (1 - p))/odds)
#Random number to simulate bet outcome
t <= sample(1:100,1)
if (t <= p) {
capital <- capital + (odds * moneyToBet)
} else {
capital <- capital - moneyToBet
}
out <- rbind(out,c(i,capital))
}
colnames(out) <- cols
out
}
simulation <- (1000,51,1000000,1)
simulation <- runKellySim(1000,51,1000000,1)
#p[double]: probability of success (passed as a percent eg. 1,2,50)
#[trials]: sample size of trials
#[odds]: The odds of the bet. 1:1 => you make back exactly what you bet. 2:1 => twice what you bet
runKellySim <- function(capital,p,trials,odds) {
out <- data.frame(matrix(ncol = 2, nrow = 0))
cols <- c("Trials","Capital")
for (i in 1:trials) {
#uses kelly formula to determine percentage of portfolio to bet
moneyToBet = (((odds * p) - (1 - p))/odds)
#Random number to simulate bet outcome
t <- sample(1:100,1)
if (t <= p) {
capital <- capital + (odds * moneyToBet)
} else {
capital <- capital - moneyToBet
}
out <- rbind(out,c(i,capital))
}
colnames(out) <- cols
out
}
simulation <- runKellySim(1000,51,1000000,1)
simulation <- runKellySim(1000,51,1000000,1)
####Outputs a dataFrame logging n trials
#capital[double]: Starting value
#p[double]: probability of success (passed as a percent eg. 1,2,50)
#[trials]: sample size of trials
#[odds]: The odds of the bet. 1:1 => you make back exactly what you bet. 2:1 => twice what you bet
runKellySim <- function(capital,p,trials,odds) {
out <- data.frame(matrix(ncol = 2, nrow = 0))
cols <- c("Trials","Capital")
for (i in 1:trials) {
#uses kelly formula to determine percentage of portfolio to bet
moneyToBet = (((odds * p) - (1 - p))/odds)
#Random number to simulate bet outcome
t <- sample(1:100,1)
if (t <= p) {
capital <- capital + (odds * moneyToBet)
} else {
capital <- capital - moneyToBet
}
out <- rbind(out,c(i,capital))
}
colnames(out) <- cols
out
}
simulation <- runKellySim(1000,51,1000000,1)
simulation <- runKellySim(1000,51,1000000,1)
simulation <- runKellySim(1000,51,100000,1)
simulation <- runKellySim(1000,51,10000,1)
qplot(data = simulation,xlab = simulation$Trials,ylab=simulation$Capital)
library(ggplot2)
qplot(data = simulation,xlab = simulation$Trials,ylab=simulation$Capital)
qplot(data = simulation,xlab = simulation$Trials,ylab=simulation$Capital)
qplot(data = simulation)
ggplot() + geom_line(data=simulation,aes(x = simulation$Trials,y = simulation$Capital)) + xlab("Trials") + ylab("Capital")
simulation <- runKellySim(1000,51,10000,1)
simulation
ggplot() + geom_line(data=out,aes(x = out$Trials,y = out$Capital)) + xlab("Trials") + ylab("Capital")
ggplot() + geom_line(data=simulation,aes(x = simulation$Trials,y = simulation$Capital)) + xlab("Trials") + ylab("Capital")
####Outputs a dataFrame logging n trials of a bet using the Kelly Criterion
#capital[double]: Starting value
#p[double]: probability of success (passed as a percent eg. 1,2,50)
#[trials]: sample size of trials
#[odds]: The odds of the bet. 1:1 => you make back exactly what you bet. 2:1 => twice what you bet
#kelly[boolean] value representing whether or not to use kelly criterion
runKellySim <- function(capital,p,trials,odds,kelly,betPercent=.01) {
out <- data.frame(matrix(ncol = 2, nrow = 0))
cols <- c("Trials","Capital")
for (i in 1:trials) {
moneyToBet = 0
#uses kelly formula to determine percentage of portfolio to bet
if (kelly) {
moneyToBet = (((odds * p) - (1 - p))/odds) * capital
} else {
moneyToBet = betPercent * capital
}
#Random number to simulate bet outcome
t <- sample(1:100,1)
if (t <= p) {
capital <- capital + (odds * moneyToBet)
} else {
capital <- capital - moneyToBet
}
out <- rbind(out,c(i,capital))
#If we run out of money, end the sim
if (capital <= 0) {
break
}
}
colnames(out) <- cols
out
}
####Outputs a dataFrame logging n trials of a bet using the Kelly Criterion
#capital[double]: Starting value
#p[double]: probability of success (passed as a percent eg. 1,2,50)
#[trials]: sample size of trials
#[odds]: The odds of the bet. 1:1 => you make back exactly what you bet. 2:1 => twice what you bet
#kelly[boolean] value representing whether or not to use kelly criterion
runKellySim <- function(capital,p,trials,odds,kelly,betPercent=.01) {
out <- data.frame(matrix(ncol = 2, nrow = 0))
cols <- c("Trials","Capital")
for (i in 1:trials) {
moneyToBet = 0
#uses kelly formula to determine percentage of portfolio to bet
if (kelly) {
moneyToBet = (((odds * p) - (1 - p))/odds) * capital
} else {
moneyToBet = betPercent * capital
}
#Random number to simulate bet outcome
t <- sample(1:100,1)
if (t <= p) {
capital <- capital + (odds * moneyToBet)
} else {
capital <- capital - moneyToBet
}
out <- rbind(out,c(i,capital))
#If we run out of money, end the sim
if (capital <= 0) {
break
}
}
colnames(out) <- cols
out
}
###Returns the risk of ruin for a particular kelly simulation
#sampleSize[int] how many kelly simulations to run
#kelly: boolean value whether to use kelly method or not
measureRisk <- function(sampleSize,capital,p,trials,odds,kelly,betPercent=.01) {
ruins <- 0
for (i in 1:sampleSize) {
s <- c()
if (kelly) {
s <- runKellySim(capital,p,trials,odds)
} else {
s <- runFlatSim(capital,p,trials,odds,betPercent)
}
if (nrow(s) < trials) {
ruins <- ruins + 1
}
}
ruins/sampleSize
}
simulation <- runKellySim(1000,51,10000,1)
simulation <- runKellySim(1000,51,10000,1)
####Outputs a dataFrame logging n trials of a bet using the Kelly Criterion
#capital[double]: Starting value
#p[double]: probability of success (passed as a percent eg. 1,2,50)
#[trials]: sample size of trials
#[odds]: The odds of the bet. 1:1 => you make back exactly what you bet. 2:1 => twice what you bet
#kelly[boolean] value representing whether or not to use kelly criterion
runKellySim <- function(capital,p,trials,odds,kelly=TRUE,betPercent=.01) {
out <- data.frame(matrix(ncol = 2, nrow = 0))
cols <- c("Trials","Capital")
for (i in 1:trials) {
moneyToBet = 0
#uses kelly formula to determine percentage of portfolio to bet
if (kelly) {
moneyToBet = (((odds * p) - (1 - p))/odds) * capital
} else {
moneyToBet = betPercent * capital
}
#Random number to simulate bet outcome
t <- sample(1:100,1)
if (t <= p) {
capital <- capital + (odds * moneyToBet)
} else {
capital <- capital - moneyToBet
}
out <- rbind(out,c(i,capital))
#If we run out of money, end the sim
if (capital <= 0) {
break
}
}
colnames(out) <- cols
out
}
simulation <- runKellySim(1000,51,10000,1)
ggplot() + geom_line(data=simulation,aes(x = simulation$Trials,y = simulation$Capital)) + xlab("Trials") + ylab("Capital")
simulation <- runKellySim(1000,51,10000,1)
ggplot() + geom_line(data=simulation,aes(x = simulation$Trials,y = simulation$Capital)) + xlab("Trials") + ylab("Capital")
simulation <- runKellySim(1000,51,10000,1)
ggplot() + geom_line(data=simulation,aes(x = simulation$Trials,y = simulation$Capital)) + xlab("Trials") + ylab("Capital")
####Outputs a dataFrame logging n trials of a bet using the Kelly Criterion
#capital[double]: Starting value
#p[double]: probability of success (passed as a percent eg. 1,2,50)
#[trials]: sample size of trials
#[odds]: The odds of the bet. 1:1 => you make back exactly what you bet. 2:1 => twice what you bet
#kelly[boolean] value representing whether or not to use kelly criterion
runKellySim <- function(capital,p,trials,odds,kelly=TRUE,betPercent=.01) {
out <- data.frame(matrix(ncol = 2, nrow = 0))
cols <- c("Trials","Capital")
for (i in 1:trials) {
moneyToBet = 0
#uses kelly formula to determine percentage of portfolio to bet
if (kelly) {
moneyToBet = (((odds * (p/100)) - (1 - (p/100)))/odds) * capital
} else {
moneyToBet = betPercent * capital
}
#Random number to simulate bet outcome
t <- sample(1:100,1)
if (t <= p) {
capital <- capital + (odds * moneyToBet)
} else {
capital <- capital - moneyToBet
}
out <- rbind(out,c(i,capital))
#If we run out of money, end the sim
if (capital <= 0) {
break
}
}
colnames(out) <- cols
out
}
###Returns the risk of ruin for a particular kelly simulation
#sampleSize[int] how many kelly simulations to run
#kelly: boolean value whether to use kelly method or not
measureRisk <- function(sampleSize,capital,p,trials,odds,kelly,betPercent=.01) {
ruins <- 0
for (i in 1:sampleSize) {
s <- c()
if (kelly) {
s <- runKellySim(capital,p,trials,odds)
} else {
s <- runFlatSim(capital,p,trials,odds,betPercent)
}
if (nrow(s) < trials) {
ruins <- ruins + 1
}
}
ruins/sampleSize
}
simulation <- runKellySim(1000,51,10000,1)
ggplot() + geom_line(data=simulation,aes(x = simulation$Trials,y = simulation$Capital)) + xlab("Trials") + ylab("Capital")
ggplot() + geom_line(data=simulation,aes(x = simulation$Trials,y = simulation$Capital)) + xlab("Trials") + ylab("Capital")
###Returns the risk of ruin for a particular kelly simulation
#sampleSize[int] how many kelly simulations to run
#kelly: boolean value whether to use kelly method or not
measureRisk <- function(sampleSize,capital,p,trials,odds,kelly,betPercent=.01) {
ruins <- 0
for (i in 1:sampleSize) {
s <- c()
if (kelly) {
s <- runKellySim(capital,p,trials,odds)
} else {
s <- runKellySim(capital,p,trials,odds,FALSE,betPercent)
}
if (nrow(s) < trials) {
ruins <- ruins + 1
}
}
ruins/sampleSize
}
risk <- measureRisk(1000,1000,51,10000,TRUE)
risk <- measureRisk(1000,1000,51,10000,1,TRUE)
##Returns the risk of ruin for a particular kelly simulation
#sampleSize[int] how many kelly simulations to run
#kelly: boolean value whether to use kelly method or not
measureRisk <- function(sampleSize,capital,p,trials,odds,kelly,betPercent=.01) {
ruins <- 0
for (i in 1:sampleSize) {
print(paste("Sim",toString(i),"Complete"))
s <- c()
if (kelly) {
s <- runKellySim(capital,p,trials,odds)
} else {
s <- runKellySim(capital,p,trials,odds,FALSE,betPercent)
}
if (nrow(s) < trials) {
ruins <- ruins + 1
}
}
ruins/sampleSize
}
risk <- measureRisk(100,1000,51,10000,1,TRUE)
