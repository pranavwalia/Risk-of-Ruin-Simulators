{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(dplyr)\n\n##Simple heads or tails function to make sure our RGN works\nheadsOrTails <- function() {\n  heads <- 0\n  tails <- 0\n  for (i in 1:1000000) {\n    c = sample(0:1,1)\n    if (c == 0) {\n      heads <- heads + 1\n    } else {\n      tails <- tails + 1\n    }\n  }\n  print(tails/(heads + tails))\n  print(heads/(heads + tails))\n}\n\nheadsOrTails()\n\n\n\n###Runs a coin flip simulation and outputs a winner or tie.\n# a [double] amount of money in player 1 bankroll\n# b [double] multiplier for amount of money in player 2 bankroll\n#S [int] Sample size\n#w [double] the fraction of a gained when a player wins\n#l [double] the fraction of a lost when a player loses\n#Outputs: a length 3 vector where a 1 represents a positive result for a P1 win, P2 win, or Tie respectively\nrunSim <- function(a,b,s,w,l) {\n  \n  player1 <- a\n  player2 <- a * b\n  output <- c(0,0,0)\n  for (i in 1:s) {\n    coin = sample(0:1,1)\n    if (coin == 0) {\n      player1 <- player1 - (l * a)\n      player2 <- player2 + (w * a)\n    } else {\n      player1 <- player1 + (w * a)\n      player2 <- player2 - (l * a)\n    }\n    \n    if (player1 <= 0) {\n      output[2] <- 1\n      output\n      break\n    } else if (player2 <= 0) {\n      output[1] <- 1\n      output\n      break\n    }\n    \n  }\n  \n  if (player1 != 0 & player2 != 0) {\n    output[3] = 1\n    output\n  }\n  \n  output\n}\n\n\n##Runs n amount of simulations to determine P1 win $, P2 win$, Tie%, P2% advantage\n##n: amount of sims to run\n#a: starting money\n#s: sample size required for a single game\n#swing: how much a player will win or lose based on outcome\n#Player2 bankroll edge\nrunMetaSim <- function(n, a, s, swing, p2Multiplier) {\n  results <- c(0,0,0)\n  for (i in 1:n) {\n    r <- runSim(a,p2Multiplier,s,swing,swing)\n    if (r[1] == 1) {\n      results[1] <- results[1] + 1\n    } else if (r[2] == 1) {\n      results[2] <- results[2] + 1\n    } else {\n      results[3] <- results[3] + 1\n    }\n  }\n  output <- c(results[1]/sum(results),results[2]/sum(results),results[3]/sum(results),-1 *(1 - p2Multiplier))\n  output\n}\n\n\n\n\n##Runs x amount of Meta-\"Simulations\"  gradually increasing the bankroll edge of one player by a given amount\n#x[int]: amount of simulations to run\n#start[double]: starting edge that player 2 has\n#increment: a percentage increase for the succesive simulation\n#Outputs: A two dimensional Data Frame: Cols[P1 win %, P2 win %, Tie %, P2$ Advantage]\nrunAggregateSims <- function(x, start, increment, swing,rounds) {\n  cols <- c(\"P1 Win %\",\"P2 Win %\", \"Tie %\",\"P2 Bankroll Advantage\")\n  out <- data.frame(matrix(ncol = 4, nrow = 0))\n  \n  for (i in 1:x) {\n    start <- start + increment\n    row <- runMetaSim(rounds,1000,1000000,swing,start)\n    \n    out <- rbind(out,row)\n    print(paste(\"Sim \", toString(i), \"/\", toString(x), \" Complete\"))\n  }\n  colnames(out) <- cols\n  out\n \n}\n\n##Runs the aggregate sims using the Huygen's Theorom\nrunAggregateSims2 <- function(x,start,increment,swing,a,b) {\n  cols <- c(\"P1 Win %\",\"P2 Win %\", \"Tie %\",\"P2 Bankroll Advantage\")\n  out <- data.frame(matrix(ncol = 4, nrow = 0))\n  \n  for (i in 1:x) {\n    b <-  b + increment\n    p1 <- (a/.02*a)/(((b*a)/.02*a) + (a/(0.2*a)))\n    p2 <- ((b*a)/.02*a)/(((b*a)/.02*a) + (a/(0.2*a)))\n    \n    p1winrate <- p1/(p1 + p2)\n    p2winrate <- p2/(p1 + p2)\n    \n    row <- c(p1winrate,p2winrate,0,-1 * (1 - b))\n    out <- rbind(out,row)\n    print(paste(\"Sim \", toString(i), \"/\", toString(x), \" Complete\"))\n  }\n  colnames(out) <- cols\n  out\n}\n\n#Plotting the Distribution\nhuygensFormula <- runAggregateSims2(300,1,.01,.02,1000,1)\nhuygensFormulaPercent <- huygensFormula * 100\n\nqplot(huygensFormulaPercent$`P2 Bankroll Advantage`,huygensFormulaPercent$`P1 Win %`,xlab = \"Player 2 Bankroll Advantage %\",ylab = \"Player 1 Win Likelihood %\",\n      main = \"Probability Player 1 Wins\")\nqplot(huygensFormulaPercent$`P2 Bankroll Advantage`,huygensFormulaPercent$`P2 Win %`,xlab = \"Player 2 Bankroll Advantage %\",ylab = \"Player 2 Win Likelihood %\",\n      main = \"Probability Player 2 Wins\")\n\npercentCombined <- cbind(huygensFormulaPercent,sims)\n\n\n\na <- ggplot() + geom_point(data = simsWithPercent,aes(x= simsWithPercent$`P2 Bankroll Advantage`, y = simsWithPercent$`P2 Win %`),color = \"yellow\") + xlab(\"P2 % Bankroll Advantage\") + ylab(\"Player 2 % Win Likelihood\") +\ngeom_line(data = huygensFormulaPercent, aes(x = huygensFormulaPercent$`P2 Bankroll Advantage`,y=huygensFormulaPercent$`P2 Win %`),color = \"blue\") + ggtitle(\"Player 2 Winning Distribution: Huygen's Formula vs Simulation\") +\ntheme(legend.position = \"top\") + theme(legend.title = element_text(colour = \"blue\", size = 10)) + scale_color_discrete(\"Legend\", c(\"Huygden's Formula\",\"Sim Results\"))\n  \na\n\n\n\n\n\n\nsims <- runAggregateSims(200,1,.01,.02,1000)\nsims2 <- runAggregateSims(100,3,.01,.02,1000)\nsims <- rbind(sims,sims2)\n\n\nsims <- runAggregateSims(300,1,.01,.02,1000)\n\nsimsWithPercent <- sims\nsimsWithPercent$`P2 Bankroll Advantage` <- simsWithPercent$`P2 Bankroll Advantage` * 100\nsimsWithPercent$`P2 Win %` <- simsWithPercent$`P2 Win %` * 100\nsimsWithPercent$`P1 Win %` <- simsWithPercent$`P1 Win %` * 100\n\n\nqplot(simsWithPercent$`P2 Bankroll Advantage`,simsWithPercent$`P2 Win %`,xlab = \"Player 2 Bankroll Advantage %\",ylab = \"Player 2 Win Likelihood %\",\n      main = \"Probability Player 2 Wins\")\n\n\nqplot(simsWithPercent$`P2 Bankroll Advantage`,simsWithPercent$`P1 Win %`,xlab = \"Player 2 Bankroll Advantage %\",ylab = \"Player 1 Win Likelihood %\",\n      main = \"Probability Player 1 Wins\")\n\n\n\nsim2 <- runAggregateSims()\n\n\n",
    "created" : 1573769998170.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "602513401",
    "id" : "B35C23D8",
    "lastKnownWriteTime" : 1573883438,
    "last_content_update" : 1573883438079,
    "path" : "~/Documents/GitHub/RiskofRuinFairGame/RiskOfRuinToyGame/coinToss.R",
    "project_path" : "coinToss.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}